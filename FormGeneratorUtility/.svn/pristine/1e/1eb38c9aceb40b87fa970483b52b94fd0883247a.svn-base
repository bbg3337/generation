package com.util.hibernate.operation;

import java.io.Serializable;
import java.util.List;

import javax.transaction.Transactional;

import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.exception.SQLGrammarException;
import org.springframework.stereotype.Repository;

import com.bean.PageMapping;
import com.util.hibernate.util.HibernateUtility;

@Repository("hibernateOperation")
public class Operation {
	
	private static Logger logger = Logger.getLogger(Operation.class);
	
	public <T> boolean insertData(T data) throws Exception{
		Session session = null;
		SessionFactory sessionFactory =  null;
		Transaction transaction = null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			transaction = session.beginTransaction();
			session.save(data);
			transaction.commit();
			return true;
		} catch(SQLGrammarException e){
			//logger.error("insertdata failed(SQLGrammarException) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("insertData failed(SQLGrammarException) : " + e);
		}
		catch (Exception e) {
			//logger.error("insertdata failed(Exception) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("insertData failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("insertData() : session and sessionFactory closed");
			}
		}
	}
	public <T> boolean insertData(T data,Class<?> cls) throws Exception{
		Session session = null;
		SessionFactory sessionFactory =  null;
		Transaction transaction = null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory(cls);
			session = sessionFactory.openSession();
			transaction = session.beginTransaction();
			session.save(data);
			transaction.commit();
			return true;
		} catch(SQLGrammarException e){
			//logger.error("insertdata failed(SQLGrammarException) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("insertData failed(SQLGrammarException) : " + e);
		}
		catch (Exception e) {
			//logger.error("insertdata failed(Exception) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("insertData failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("insertData() : session and sessionFactory closed");
			}
		}
	}
	//
	public <T>  List<T> listData(String modelName) throws Exception {
		Session session = null;
		SessionFactory sessionFactory =  null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			List<T> dataList= session.createQuery("from "+modelName).list();
			return dataList;
		} catch (Exception e) {
			//logger.error("listData failed(Exception) : " + e);
			e.printStackTrace();
			throw new Exception("\nlistData failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("listData() : session and sessionFactory closed");
			}
		}
	}
	
	public <T>  List<T> listData(String modelName,Class<?> cls) throws Exception {
		Session session = null;
		SessionFactory sessionFactory =  null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory(cls);
			session = sessionFactory.openSession();
			List<T> dataList= session.createQuery("from "+modelName).list();
			return dataList;
		} catch (Exception e) {
			//logger.error("listData failed(Exception) : " + e);
			e.printStackTrace();
			throw new Exception("\nlistData failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("listData() : session and sessionFactory closed");
			}
		}
	}
	
	//
	public <T>  int countTotalData(String modelName,String whareClause ) throws Exception{
		String queryWhere="";
		if(whareClause!=null || whareClause!=""){
			queryWhere = "where " + whareClause;
			System.err.println(queryWhere);
		}
		//System.out.println(whareClause);
		Session session = null;
		SessionFactory sessionFactory =  null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			
			Query query= session.createQuery("select count(*) from "+modelName + " "+ queryWhere );
			
			return ((Long) query.uniqueResult()).intValue();
		} catch (Exception e) {
			//logger.error("countTotalData failed(Exception) : " + e);
			e.printStackTrace();
			throw new Exception("countTotalData failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("countTotalData() : session and sessionFactory closed");
			}
		}
	}
	//
	public <T>  List<T> listDataWithWhreClause(String modelName,String whareClause) throws Exception{
		System.out.println(whareClause);
		Session session = null;
		SessionFactory sessionFactory =  null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			Query query = session.createQuery("from "+modelName + " where " + whareClause );
			
			List<T> dataList= query.list();
			
			return dataList;
		} catch (Exception e) {
			//logger.error("listDataWithWhreClause failed(Exception : )" + e);
			e.printStackTrace();
			throw new Exception("listDataWithWhreClause failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("listDataWithWhreClause() : session and sessionFactory closed");
			}
		}
	}
	public <T>  List<T> listDataWithOrderBy(String modelName,String orderIds) throws Exception{
		Session session = null;
		SessionFactory sessionFactory =  null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			Query query = session.createQuery("from "+modelName +" order by "+ orderIds);
			List<T> dataList= query.list();
			
			return dataList;
		} catch (Exception e) {
			//logger.error("listDataWithOrderBy failed(Exception) : " + e);
			e.printStackTrace();
			throw new Exception("listDataWithOrderBy failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("listDataWithOrderBy() : session and sessionFactory closed");
			}
		}
	}
	//
	
	public <T>  List<T> listDataWithWhreClause(String modelName,String whareClause,int start,int noOfRecord) throws Exception{
		System.out.println(whareClause);
		Session session = null;
		SessionFactory sessionFactory =  null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			
			Query query= session.createQuery("from "+modelName + " where " + whareClause );
			query.setFirstResult(start);
			query.setMaxResults(noOfRecord);
			return query.list();
		} catch (Exception e) {
			//logger.error("listDataWithWhreClause failed(Exception) : " + e);
			e.printStackTrace();
			throw new Exception("listDataWithWhreClause failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("listDataWithWhreClause() : session and sessionFactory closed");
			}
		}
	}
	
	
	///
	
	public boolean deleteData(Class<?> type, Serializable id) throws Exception {
		Session session = null;
		SessionFactory sessionFactory =  null;
		Transaction transaction =null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			Object data= session.load(type, id);
			transaction = session.beginTransaction();
			if(data!=null){
				session.delete(data);
				transaction.commit();
				return true;
			}
			return false;
		}catch(org.hibernate.ObjectNotFoundException e){
			//logger.error("deleteData failed(ObjectNotFoundException) : " + e);
			e.printStackTrace();
			throw new Exception("deleteData failed(ObjectNotFoundException) : " + e);
		}
		catch (Exception e) {
			logger.error("deleteData failed(Exception) : " + e);
			e.printStackTrace();
			throw new Exception("deleteData failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("deleteData() : session and sessionFactory closed");
			}
		}
	}
	
	public Object getDataById(Class<?> type, Serializable id) throws Exception {
		Session session = null;
		SessionFactory sessionFactory =  null;
		
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			Object data= session.get(type, id);
			if(data!=null){
			
				return data;
			}else{
				return null;
			}
		}catch(SQLGrammarException e){
			//logger.error("getDataById failed(SQLGrammarException) : " + e);
			e.printStackTrace();
			throw new Exception("getDataById failed(SQLGrammarException) : " + e);
		}catch(org.hibernate.ObjectNotFoundException e){
			//logger.error("getDataById failed(ObjectNotFoundException) : " + e);
			e.printStackTrace();
			throw new Exception("getDataById failed(ObjectNotFoundException) : " + e);
		}
		catch (Exception e) {
			//logger.error("getDataById failed(Exception) " + e);
			e.printStackTrace();
			throw new Exception("getDataById failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("getDataById() : session and sessionFactory closed");
			}
		}
	}
	
	
	public <T> boolean updateData(T userData) throws Exception {
		Session session = null;
		SessionFactory sessionFactory =  null;
		Transaction transaction = null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			transaction = session.beginTransaction();
			session.update(userData);
			transaction.commit();
			return true;
		} catch (Exception e) {
			//logger.error("updateData failed(Exception) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("updateData failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("updateData() : session and sessionFactory closed");
			}
		}
	}
	
	
	public  int updateDataWithSQL(String queryString) throws Exception {
		Session session = null;
		SessionFactory sessionFactory =  null;
		Transaction transaction = null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			transaction = session.beginTransaction();
			Query query = session.createSQLQuery(queryString);
			int noOfRecordUpdated = query.executeUpdate();
			transaction.commit();
			return noOfRecordUpdated;
		} catch (Exception e) {
			//logger.error("updateDataWithSQL failed(Exception) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("updateDataWithSQL failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("updateDataWithSQL() : session and sessionFactory closed");
			}
		}
	}
	
	//Parth code
	public <T> int insertDataAndReturnId(T data) throws Exception {
		Session session = null;
		SessionFactory sessionFactory =  null;
		Transaction transaction = null;
		int id = 0;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			transaction = session.beginTransaction();
			id = (int) session.save(data);
			transaction.commit();
			return id;
		} catch(SQLGrammarException e){
			//logger.error("insertDataAndReturnId failed(SQLGrammarException) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("insertDataAndReturnId failed(SQLGrammarException) : " + e);
		}
		catch (Exception e) {
			//logger.error("insertDataAndReturnId failed(Exception)" + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("insertDataAndReturnId failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("insertDataAndReturnId() : session and sessionFactory closed");
			}
		}
	}
	
//	return True or False
	public boolean executeSqlQuery(String query) throws Exception {
		Session session = null;
		SessionFactory sessionFactory =  null;
		Transaction transaction = null;
		SQLQuery sqlQuery = null;
		int id = 0;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			transaction = session.beginTransaction();
			
			sqlQuery = session.createSQLQuery(query);
			sqlQuery.executeUpdate();
			
			transaction.commit();
			return true;
		} catch(SQLGrammarException e){
			//logger.error("executeSqlQuery failed(SQLGrammarException) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("executeSqlQuery failed(SQLGrammarException) : " + e);
		}
		catch (Exception e) {
			//logger.error("executeSqlQuery failed(Exception) : " + e);
			if(transaction != null){
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("executeSqlQuery failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("executeSqlQuery() : session and sessionFactory closed");
			}
		}
	}
	@Transactional
	public int deleteData(String modelName,String whareClause ) throws Exception {
		String queryWhere="";
		if(whareClause!=null || whareClause!=""){
			queryWhere = "where " + whareClause;
			System.err.println(queryWhere);
		}
		//System.out.println(whareClause);
		Session session = null;
		SessionFactory sessionFactory =  null;
		Transaction transaction = null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			
			Query query= session.createQuery("delete from "+modelName + " "+ queryWhere );
			transaction = session.beginTransaction();
			int result = query.executeUpdate();
			transaction.commit();
			return (result);
	
		} catch (Exception e) {
			//logger.error("deleteData failed(Exception) : " + e);
			e.printStackTrace();
			throw new Exception("deleteData failed(Exception) : " + e);
		}finally {
			if(session != null && sessionFactory !=null){
				session.close();
				sessionFactory.close();
				logger.info("deleteData() : session and sessionFactory closed");
			}
		}
	}

	// return True or False after successfully executing all queries
	public boolean batchProcessing(List<String> queries) throws Exception {
		Session session = null;
		SessionFactory sessionFactory = null;
		Transaction transaction = null;
		Query hqlQuery = null;
		try {
			sessionFactory = new HibernateUtility().getSessionFactory();
			session = sessionFactory.openSession();
			transaction = session.beginTransaction();

			for (String query : queries) {
				hqlQuery = session.createQuery(query);
				hqlQuery.executeUpdate();
			}

			transaction.commit();
			logger.info("batchProcessing done");
			return true;
		} catch (SQLGrammarException e) {
			//logger.error("batchProcessing failed(SQLGrammarException) : " + e);
			if (transaction != null) {
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("batchProcessing failed(SQLGrammarException) : " + e);
		} catch (Exception e) {
			//logger.error("batchProcessing failed(Exception) : " + e);
			if (transaction != null) {
				transaction.rollback();
			}
			e.printStackTrace();
			throw new Exception("batchProcessing failed(Exception) : " + e);
		} finally {
			if (session != null && sessionFactory != null) {
				session.close();
				sessionFactory.close();
				logger.info("batchProcessing() : session and sessionFactory closed");
			}
		}
	}
}
