package com.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.HandlerMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bean.PageMapping;
import com.bean.RegexPattern;
import com.bean.TblFormSchema;
import com.service.FormUtilityService;
import com.util.common.CommonUtility;
import com.util.hibernate.operation.Operation;

@Controller
public class FormUtilityController {
	
	@Autowired
	private FormUtilityService formUtilityService;
	
	@Autowired
	private CommonUtility commonUtility;
	
	@RequestMapping(value = "/",method = RequestMethod.GET)
    public ModelAndView home(){
        System.out.println("in home");   //print three times ,when first called.
        return new ModelAndView("redirect:index");
    }
	
	@RequestMapping(value="/genrateClass" ,method = RequestMethod.GET)
	public String generateClass(ModelMap model) {
		model.addAttribute("message", "Hello Spring MVC Framework!");
		formUtilityService.genrateClass();
		return "GenrateClass";
	}
	
	@RequestMapping(value="/updateForm" ,method = RequestMethod.POST)
	public String updateForm(ModelMap model,HttpServletRequest request) {
		String pageMappingId  =  request.getParameter("pageMappingId");
		
		PageMapping pageMappingObj = formUtilityService.getPageMappingData(pageMappingId);
		System.out.println("Request "+ request.getParameter("pageMappingId"));
		
		List<TblFormSchema> listFormSchemas = formUtilityService.getTableFormSchemaData(pageMappingObj.getId());
		System.out.println("Count " + listFormSchemas.size());
		
		List<RegexPattern> listRegexPatterns = formUtilityService.getListRegEx(null);
		
		String formTableString =formUtilityService.generateHTMLFormTableString(listFormSchemas,listRegexPatterns) ;
		System.out.println("formTableString"+formTableString);
		
		String htmlRegexPatternsForTextModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"TextModule");
		String htmlRegexPatternsForSelectModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"SelectModule");
		String htmlRegexPatternsForNumberModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"NumberModule");
		String htmlRegexPatternsForPasswordModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"PasswordModule");
		String htmlRegexPatternsForRadioModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"RadioModule");
		String htmlRegexPatternsForCheckboxModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"CheckboxModule");
		String htmlRegexPatternsForDateModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"DateModule");
		
		request.setAttribute("htmlRegexPatternsForTextModule", htmlRegexPatternsForTextModule);
		request.setAttribute("htmlRegexPatternsForSelectModule", htmlRegexPatternsForSelectModule);
		request.setAttribute("htmlRegexPatternsForNumberModule", htmlRegexPatternsForNumberModule);
		request.setAttribute("htmlRegexPatternsForPasswordModule", htmlRegexPatternsForPasswordModule);
		request.setAttribute("htmlRegexPatternsForRadioModule", htmlRegexPatternsForRadioModule);
		request.setAttribute("htmlRegexPatternsForCheckboxModule", htmlRegexPatternsForCheckboxModule);
		request.setAttribute("htmlRegexPatternsForDateModule", htmlRegexPatternsForDateModule);
		
		//formUtilityService.genrateClass();
		model.put("pageID",pageMappingId);
		model.put("counter",listFormSchemas.size()+1);
		model.put("htmlFormTable", formTableString);
		model.put("pageName", pageMappingObj.getPageName());
		
		return "updateForm";
	}
	
	/*@RequestMapping(value="/genrateClassFromTable" ,method = RequestMethod.POST)
	public String generateClassFromTable(ModelMap model,HttpServletRequest request) {
		model.addAttribute("message", "Hello Spring MVC Framework!");
		String buildPath =request.getServletContext().getRealPath("/");
		System.out.println("build path: " + buildPath);
		if(formUtilityService.generateClassFromTable("tbl_form_schema",buildPath,null)){
			
		}else{
			
		}
		// System.out.println( request.getServletContext().getRealPath("/"));
		return "GenrateClass";
	}*/
	
	@RequestMapping(value="/insertForm/{path}", method = RequestMethod.POST)
	public String insertForm(@PathVariable("path") String path, HttpServletRequest request, ModelMap model, RedirectAttributes redirectAttrs) throws Exception {
	    String remainingPaths = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);
	    String className = path.substring(0, 1).toUpperCase() + path.substring(1);
	    
		Class<?> clazz;
		try {
			clazz = Class.forName(commonUtility.getValueFromPropertieFile("beanPackage")+"."+className);
			Object clsObject = clazz.newInstance();
			
			System.out.println("" + clsObject.getClass());
			Object dataObject = commonUtility.bindDataInObject(clsObject, clsObject.getClass(),request);
			System.out.println(dataObject);
			HashMap<String, String> validateMessages =commonUtility.hibernateValidation(clsObject.getClass(), dataObject); 
			if(validateMessages==null){
				
				if (formUtilityService.insertData(dataObject, clsObject.getClass())) {
					redirectAttrs.addFlashAttribute("message", "Data inserted successfully!");
				} else {
					redirectAttrs.addFlashAttribute("errMessage", "Data insertion fail");
				}
			}else{
				System.out.println(validateMessages);
				StringBuilder errorMessage = new StringBuilder();
				for(Map.Entry<String, String>  validationMsg :  validateMessages.entrySet()){
					errorMessage.append(validationMsg.getValue() +"<br>");
				}
				redirectAttrs.addFlashAttribute("errMessage", errorMessage.toString());
			}
		}catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	   
	    
	   // ModelAndView modelAndView = new ModelAndView("redirect:openForm/"+path);
	    
	    return "redirect:../openForm/"+path;
	}
	
	@RequestMapping(value="/openForm/{path}", method = RequestMethod.GET)
	public String openForm(@PathVariable("path") String path, HttpServletRequest request, ModelMap model) throws Exception {
	    String remainingPaths = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);
	    System.out.println("path = " + path + "/" + remainingPaths);
	    String buildPath =request.getServletContext().getRealPath("/");
	    try
		{
	    	/*			
			String pageName = (String) model.get("pageName");
			String compileLocation = request.getServletContext().getRealPath("/");
	    	 */		
	    	List list = formUtilityService.getListDataFromModelName(path.substring(0, 1).toUpperCase() + path.substring(1)) ;
	    	System.out.println("datalist"+list);
			//model.addAttribute("message", "Form Generated Successfully!");
			model.addAttribute("listData",list);
			return path;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return "error";
		}
	    
	    
	    
	    //return path;
	}
	
	//Parth Code.
	
	@RequestMapping(value="/error" ,method = RequestMethod.GET)
	public String errorPage(ModelMap model) {
		model.addAttribute("message", "!");
		return "error";
	}
	

	@RequestMapping(value = "/generateTable", method = RequestMethod.POST)
	public ModelAndView generateTable(RedirectAttributes redirect, HttpServletRequest request) {
		String[] fld_ctrl = request.getParameterValues("fld_ctrl");
		String[] fld_type = request.getParameterValues("fld_type");
		String[] fld_lbl = request.getParameterValues("fld_lbl");
		String[] fld_name = request.getParameterValues("fld_name");
		String[] fld_size = request.getParameterValues("fld_size");
		String[] fld_val = request.getParameterValues("fld_val");
		String[] fld_index = request.getParameterValues("fld_index");
		String[] regex = request.getParameterValues("regex");
		String[] start_date = request.getParameterValues("start_date");
		String[] end_date = request.getParameterValues("end_date");
		String[] date_format = request.getParameterValues("date_format");
		String[] date_all = request.getParameterValues("date_all");
		String[] date_past = request.getParameterValues("date_past");
		String[] date_future = request.getParameterValues("date_future");
		
		for(int j=0;j<fld_ctrl.length;j++)
		{
			
			System.out.print(fld_ctrl[j] + " : " + fld_type[j] + " : " + regex[j] + " : ");
			System.out.print(start_date[j] + " : " + end_date[j] + " : " + date_format[j]);
			System.out.println(date_all[j] + " : " + date_past[j] + " : " + date_future[j]);
		}
		
		String pageName = request.getParameter("pageName").trim();
		//fld_name=commonUtility.replaceInStringArray(fld_name);
		/*Map<String, String> controlMapWithName = commonUtility.createMapCollectionUsingStringArray(fld_name,fld_ctrl);
		
		Map<String, String> regexMapWithName = commonUtility.createMapCollectionUsingStringArray(fld_name,regex);
		*/
	//	List<RegexPattern> listRegEx= formUtilityService.getListRegEx(regex);
	//	System.out.println("List regex" + listRegEx);
		
		System.out.println("Field " + Arrays.toString(fld_name).replace('[', ',').replace(']', ','));
		if(Arrays.toString(fld_name).replace("[", ", ").replace(']', ',').toLowerCase().contains(", id,")){
			ModelAndView modelAndView = new ModelAndView("redirect:index");
			redirect.addFlashAttribute("errMsg", "Id field Can not be inserted,Its By default!");
			return modelAndView;
		}
		String compileLocation = request.getServletContext().getRealPath("/");
		int pageMappingId =0;
		try {
			
			
			if (pageName.equals("") || commonUtility.checkNull(fld_ctrl) || commonUtility.checkNull(fld_type)
					|| commonUtility.checkNull(fld_lbl) || commonUtility.checkNull(fld_name)
					|| commonUtility.checkNull(fld_index)) {
				ModelAndView modelAndView = new ModelAndView("redirect:index");
				redirect.addFlashAttribute("errMsg", "Please insert proper data!");
				return modelAndView;
			}
			
			if (pageName != "" && pageName != null) {
				if (formUtilityService.isPageExist(pageName)) {
					ModelAndView modelAndView = new ModelAndView("redirect:index");
					redirect.addFlashAttribute("errMsg", "Page already exist!");
					return modelAndView;
				}
			}
			
			PageMapping pageMapping = new PageMapping();
			pageMapping.setPageName(pageName);
			
			Map<String, TblFormSchema> tableFormSchemaMapList=	formUtilityService.setTableFormSchemaInMap(fld_ctrl, fld_type, fld_lbl, fld_name, fld_size, fld_val, fld_index, regex, 
					date_all, date_past, date_future, start_date, end_date, date_format, 0);
			
			HashMap<String, String> errorFields = formUtilityService.validateFormGenerationData(pageMapping,tableFormSchemaMapList);
			//System.out.println("List" + list + " total map value is "+tableFormSchemaMap.values().size());
			if(errorFields.isEmpty()){
				pageMappingId = formUtilityService.insertPageMappingData(pageMapping);
				System.out.println("pageMappingId : " + pageMappingId);
				if (formUtilityService.insertFieldData(tableFormSchemaMapList, pageMappingId)) {

					if (formUtilityService.createTable(pageName, tableFormSchemaMapList)) {

						
						// Bhadresh Bajariya
						String buildPath = request.getServletContext().getRealPath("/");

						if (formUtilityService.generateClassFromTable(pageName, buildPath, tableFormSchemaMapList)) {
							List<TblFormSchema> list = formUtilityService.getTableFormSchemaData(pageMappingId);
							formUtilityService.generateForm(list, pageName, compileLocation);
						} else {
							if(formUtilityService.dropForm(pageMappingId, pageName, compileLocation)){
								System.out.println("All form data deleted Due to get Exception of class genration");
							}
							ModelAndView modelAndView = new ModelAndView("redirect:index");
							redirect.addFlashAttribute("errMsg", "ClassGenration failed");
							return modelAndView;
						}

					} else {
						if( formUtilityService.deletePageMappingFromPageName(pageName)){
							System.out.println("Page Mapping deleted");
						}
						if(formUtilityService.deletePageTableFields(pageMappingId) != 0){
							System.out.println("Page Mapping Field deleted");
						}
						ModelAndView modelAndView = new ModelAndView("redirect:index");
						redirect.addFlashAttribute("errMsg", "Table Creation failed");
						return modelAndView;
					}
				}else{
					if( formUtilityService.deletePageMappingFromPageName(pageName)){
						System.out.println("Page Mapping deleted");
					}
					ModelAndView modelAndView = new ModelAndView("redirect:index");
					redirect.addFlashAttribute("errMsg", "Failed insertion faild, delete page and retry");
					return modelAndView;
				}
			}else{
				String errorString = "";
				for(Entry<String, String> error : errorFields.entrySet() ){
					//errorList.putAll( commonUtility.hibernateValidation(TblFormSchema.class, tblFormSchema.getValue()));
					//System.out.println("Error : "+ error.getValue());
					errorString +=  error.getValue() + "<br>";
				}
				ModelAndView modelAndView = new ModelAndView("redirect:index");
				redirect.addFlashAttribute("errMsg",errorString);
				return modelAndView;
			}
			

			
			
			// End Code

			ModelAndView modelAndView = new ModelAndView("redirect:openForm/" + pageName);
			redirect.addFlashAttribute("pageName", pageName);
			return modelAndView;
		} catch (Exception e) {
			if(formUtilityService.dropForm(pageMappingId, pageName, compileLocation)){
				System.out.println("All form data deleted Due to get Exception : " + e.getMessage());
			}
			e.printStackTrace();
			return new ModelAndView("error").addObject("errMsg", "Please insert proper data!");
		}

	}

	@RequestMapping(value = "/updateTable", method = RequestMethod.POST)
	public ModelAndView updateTable(RedirectAttributes redirect, HttpServletRequest request) {
		String[] fld_ctrl = request.getParameterValues("fld_ctrl");
		String[] fld_type = request.getParameterValues("fld_type");
		String[] fld_lbl = request.getParameterValues("fld_lbl");
		String[] fld_name = request.getParameterValues("fld_name");
		String[] fld_size = request.getParameterValues("fld_size");
		String[] fld_val = request.getParameterValues("fld_val");
		String[] fld_index = request.getParameterValues("fld_index");
		String[] regex = request.getParameterValues("regex");
		String[] start_date = request.getParameterValues("start_date");
		String[] end_date = request.getParameterValues("end_date");
		String[] date_format = request.getParameterValues("date_format");
		String[] date_all = request.getParameterValues("date_all");
		String[] date_past = request.getParameterValues("date_past");
		String[] date_future = request.getParameterValues("date_future");

		System.out.println("Field " + Arrays.toString(fld_name).replace('[', ',').replace(']', ','));
		// fld_name=commonUtility.replaceInStringArray(fld_name);
		String pageName = request.getParameter("pageName");
		int pageId = Integer.parseInt(request.getParameter("tableId"));
		List<TblFormSchema> listCurrentTblFormSchemaData = formUtilityService.getTableFormSchemaData(pageId);
		
		if (Arrays.toString(fld_name).replace("[", ", ").replace(']', ',').toLowerCase().contains(", id,")) {
			ModelAndView modelAndView = new ModelAndView("redirect:index");
			redirect.addFlashAttribute("errMsg", "Id field Can not be inserted,Its By default!");
			return modelAndView;
		}

		if (pageName.equals("") || commonUtility.checkNull(fld_ctrl) || commonUtility.checkNull(fld_type)
				|| commonUtility.checkNull(fld_lbl) || commonUtility.checkNull(fld_name)
				|| commonUtility.checkNull(fld_index)) {
			ModelAndView modelAndView = new ModelAndView("redirect:index");
			redirect.addFlashAttribute("errMsg", "Please insert proper data!");
			return modelAndView;
		}

		System.out.println(Arrays.toString(fld_type));
		PageMapping pageMapping = new PageMapping();
		pageMapping.setId(pageId);
		pageMapping.setPageName(pageName);
		String buildPath = request.getServletContext().getRealPath("/");
		Map<String, TblFormSchema> tableFormSchemaMapList = formUtilityService.setTableFormSchemaInMap(fld_ctrl,
				fld_type, fld_lbl, fld_name, fld_size, fld_val, fld_index, regex, date_all, date_past, date_future,
				start_date, end_date, date_format, pageId);
		HashMap<String, String> errorFields = formUtilityService.validateFormGenerationData(pageMapping,
				tableFormSchemaMapList);

		// Insert field in Table

		if (errorFields.isEmpty()) {
			// Delete old field from Table
			formUtilityService.deletePageTableFields(pageId);
			System.out.println("Delete data done");
			/*
			 * Map<String, TblFormSchema> tableFormSchemaMap=
			 * formUtilityService.insertFieldData(fld_ctrl,fld_type, fld_lbl,
			 * fld_name, fld_size, fld_val, fld_index, regex, date_all,
			 * date_past, date_future, start_date, end_date, date_format,
			 * pageId);
			 */
			
			if (formUtilityService.insertFieldData(tableFormSchemaMapList, pageId)) {
				System.out.println("Insert field data done");
				
				if (formUtilityService.updateTableSchema(pageName, tableFormSchemaMapList)) {

					System.out.println("Table data update done");

					// Bhadresh Bajariya
					

					if (formUtilityService.generateClassFromTable(pageName, buildPath, tableFormSchemaMapList)) {
						// Recreate form
						String compileLocation = request.getServletContext().getRealPath("/");
						List<TblFormSchema> list = formUtilityService.getTableFormSchemaData(pageId);
						formUtilityService.generateForm(list, pageName, compileLocation);
						System.out.println("Form Genration is done ");
						// update table schema
					} else {
						formUtilityService.dropForm(pageId, pageName, buildPath);
						
						if(!formUtilityService.regenerateTableAndForm(pageId, pageName,listCurrentTblFormSchemaData ,buildPath)){
							formUtilityService.dropForm(pageId, pageName, buildPath);
							ModelAndView modelAndView = new ModelAndView("redirect:index");
							redirect.addFlashAttribute("errMsg", "Table and Form distroy due to Technical problem");
							return modelAndView;
						}else{
							
						}
						ModelAndView modelAndView = new ModelAndView("redirect:index");
						redirect.addFlashAttribute("errMsg", "ClassGenration failed, and All table data distroy");
						return modelAndView;
					}

				} else {
					formUtilityService.dropForm(pageId, pageName, buildPath);
					
					if(!formUtilityService.regenerateTableAndForm(pageId, pageName,listCurrentTblFormSchemaData ,buildPath)){
						formUtilityService.dropForm(pageId, pageName, buildPath);
						ModelAndView modelAndView = new ModelAndView("redirect:index");
						redirect.addFlashAttribute("errMsg", "Table and Form distroy due to Technical problem");
						return modelAndView;
					}
					
					ModelAndView modelAndView = new ModelAndView("redirect:index");
					redirect.addFlashAttribute("errMsg", "Table Updateing faild, and All table data distroy");
					return modelAndView;
				}
			} else {
				
				formUtilityService.dropForm(pageId, pageName, buildPath);
				
				if(!formUtilityService.regenerateTableAndForm(pageId, pageName,listCurrentTblFormSchemaData ,buildPath)){
					formUtilityService.dropForm(pageId, pageName, buildPath);
					ModelAndView modelAndView = new ModelAndView("redirect:index");
					redirect.addFlashAttribute("errMsg", "Table and Form distroy due to Technical problem");
					return modelAndView;
				}
				
				ModelAndView modelAndView = new ModelAndView("redirect:index");
				redirect.addFlashAttribute("errMsg", "Failed Update faild, and All table data distroy");
				return modelAndView;
			}

		} else {
			String errorString = "";
			for (Entry<String, String> error : errorFields.entrySet()) {
				// errorList.putAll(
				// commonUtility.hibernateValidation(TblFormSchema.class,
				// tblFormSchema.getValue()));
				// System.out.println("Error : "+ error.getValue());
				errorString += error.getValue() + "<br>";
			}
			ModelAndView modelAndView = new ModelAndView("redirect:index");
			redirect.addFlashAttribute("errMsg", errorString);
			return modelAndView;
		}

		System.out.println("Class Genration is done ");
		// End Code

		ModelAndView modelAndView = new ModelAndView("redirect:index");
		/*
		 * redirect.addFlashAttribute("fk", pageId);
		 * redirect.addFlashAttribute("pageName", pageName);
		 */
		return modelAndView;
	}
	
	@RequestMapping(value="/dropForm" ,method = RequestMethod.POST)
	public ModelAndView dropForm(ModelMap model, HttpServletRequest request) {
		System.out.println(request.getParameter("pageMappingId"));
		int pageMappingId = Integer.parseInt(request.getParameter("pageMappingId"));
		String pageMappingName = request.getParameter("pageMappingName");
		String compileLocation = request.getServletContext().getRealPath("/");
		
		formUtilityService.dropForm(pageMappingId, pageMappingName, compileLocation);
		
		return new ModelAndView("redirect:index");
	}
	@RequestMapping(value="/addRegexPattern" ,method = RequestMethod.POST)
	public @ResponseBody String addRegex(@RequestParam("regexPattern") String regexPattern,@RequestParam("name") String name, @RequestParam("validationMsg") String validationMsg,@RequestParam("moduleType") String moduleType ){
		
		RegexPattern regexObj=  new RegexPattern();
		regexObj.setPattern(regexPattern);
		regexObj.setName(name);
		regexObj.setMassage(validationMsg);
		regexObj.setModule(moduleType);
		
		String regexHtmlData = new String();
		
		List<RegexPattern> listRegexPatterns = null;
		if(formUtilityService.insertObjectIntoDB(regexObj)){
			listRegexPatterns=formUtilityService.getListRegEx(null);
			regexHtmlData = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,regexObj.getModule());	
		}
		return regexHtmlData;
	}
	
	@RequestMapping(value="/index" ,method = RequestMethod.GET)
	public String index(ModelMap model, HttpServletRequest request) {
		System.out.println("...");
		
		List<RegexPattern> listRegexPatterns = formUtilityService.getListRegEx(null);
		
		String htmlRegexPatternsForTextModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"TextModule");
		String htmlRegexPatternsForSelectModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"SelectModule");
		String htmlRegexPatternsForNumberModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"NumberModule");
		String htmlRegexPatternsForPasswordModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"PasswordModule");
		String htmlRegexPatternsForRadioModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"RadioModule");
		String htmlRegexPatternsForCheckboxModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"CheckboxModule");
		String htmlRegexPatternsForDateModule  = formUtilityService.getHTMLRegexPatternDataForModule(listRegexPatterns,"DateModule");
		
		List<PageMapping> listPageMappings = formUtilityService.getPageMappingData();
		System.out.println(htmlRegexPatternsForTextModule);
		request.setAttribute("htmlRegexPatternsForTextModule", htmlRegexPatternsForTextModule);
		request.setAttribute("htmlRegexPatternsForSelectModule", htmlRegexPatternsForSelectModule);
		request.setAttribute("htmlRegexPatternsForNumberModule", htmlRegexPatternsForNumberModule);
		request.setAttribute("htmlRegexPatternsForPasswordModule", htmlRegexPatternsForPasswordModule);
		request.setAttribute("htmlRegexPatternsForRadioModule", htmlRegexPatternsForRadioModule);
		request.setAttribute("htmlRegexPatternsForCheckboxModule", htmlRegexPatternsForCheckboxModule);
		request.setAttribute("htmlRegexPatternsForDateModule", htmlRegexPatternsForDateModule);
		model.put("liPageMappings", listPageMappings);
		return "home";
	}
	
	
}
