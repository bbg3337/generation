package com.util.hibernate.util;

import java.util.Properties;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;

import com.bean.HtmlElement;
import com.bean.PageMapping;
import com.bean.TblFormSchema;



public class HibernateUtility {
	
private SessionFactory sessionFactory;
	
	public SessionFactory getSessionFactory(){
 
	try{
		  Properties  prop = new Properties();
	        prop.setProperty("hibernate.connection.driver_class", "com.mysql.jdbc.Driver");
	        prop.setProperty("hibernate.connection.url", "jdbc:mysql://192.168.6.59:3306/test");
			prop.setProperty("hibernate.connection.username", "root");
			prop.setProperty("hibernate.connection.password", "");
			prop.setProperty("hibernate.default_schema", "test");
			prop.setProperty("dialect", "org.hibernate.dialect.MySQLDialect");
			prop.setProperty("hibernate.hbm2ddl.auto","update");
			prop.setProperty("hibernate.show_sql","true");
			/*prop.setProperty("hibernate.format_sql","true");*/
			
			
			AnnotationConfiguration configuration = new AnnotationConfiguration();
			/*configuration.addPackage("demo.model");*/
			//configuration.addAnnotatedClass(FieldTable.class);
			configuration.addAnnotatedClass(TblFormSchema.class);
			configuration.addAnnotatedClass(HtmlElement.class);
			configuration.addAnnotatedClass(PageMapping.class);
			configuration.addProperties(prop);
			
			return configuration.buildSessionFactory();
	}catch(Throwable ex){
		//throw new ExceptionInInitializerError(ex);
		ex.printStackTrace();
	}
        
	return sessionFactory;
	}
	
	public SessionFactory getSessionFactory(Class... outputClass){
		try{
			  Properties  prop = new Properties();
		        prop.setProperty("hibernate.connection.driver_class", "com.mysql.jdbc.Driver");
		        prop.setProperty("hibernate.connection.url", "jdbc:mysql://192.168.6.59:3306/test");
				prop.setProperty("hibernate.connection.username", "root");
				prop.setProperty("hibernate.connection.password", "");
				prop.setProperty("hibernate.default_schema", "test");
				prop.setProperty("dialect", "org.hibernate.dialect.MySQLDialect");
				prop.setProperty("hibernate.hbm2ddl.auto","update");
				prop.setProperty("hibernate.show_sql","true");
			/*	prop.setProperty("hibernate.format_sql","true");*/
				
				
				AnnotationConfiguration configuration = new AnnotationConfiguration();
			
				for (Class cls : outputClass) {
					configuration.addAnnotatedClass(cls);
				}
				configuration.addProperties(prop);
				
				return configuration.buildSessionFactory();
		}catch(Throwable ex){
			//throw new ExceptionInInitializerError(ex);
			ex.printStackTrace();
		}
	        
		return sessionFactory;
	}
}
